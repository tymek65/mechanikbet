import Head from 'next/head';
import { useQuery } from 'react-query';
import axios from 'axios';
import { useState, useEffect, useContext } from 'react';
import Cookies from 'universal-cookie';
import { useRouter } from 'next/router';
import SingleBet from '../components/SingleBet';
import { Button, Badge, Input, Center, Box, Flex, Grid, Avatar, Heading, Text, Image } from '@chakra-ui/react';
import SingleKupon from '../components/SingleKupon';
import LoadingView from '../components/LoadingView';
import { Context } from '../client/AuthContext';

export default function Home() {
  const user = useContext(Context);
  const router = useRouter();
  const { isLoading, data } = useQuery('repoData', () => fetch(`${process.env.NEXT_PUBLIC_STRAPI_URL}/zakladies?active=true`).then((res) => res.json()));
  const cookies = new Cookies();
  const [login, setLogin] = useState();
  const [password, setPassword] = useState();
  const [isLogged, setIsLogged] = useState(false);
  const [points, setPoints] = useState(0);
  const [myBets, setMyBets] = useState(null);

  useEffect(() => {
    if (cookies.get('token')) {
      setIsLogged(true);
    }
    if (isLogged === true) {
      axios
        .get(`${process.env.NEXT_PUBLIC_STRAPI_URL}/users/me`, {
          headers: {
            Authorization: `Bearer ${cookies.get('token')}`,
          },
        })
        .then((res) => {
          setPoints(res.data.punkty);
          setMyBets(res.data.kuponies.reverse().slice(0, 3));
        });
    }
  }, []);
  useEffect(() => {
    if (isLogged === true) {
      axios
        .get(`${process.env.NEXT_PUBLIC_STRAPI_URL}/users/me`, {
          headers: {
            Authorization: `Bearer ${cookies.get('token')}`,
          },
        })
        .then((res) => {
          const temparray = res.data.kuponies
            .sort((a, b) => {
              return new Date(b.datarozdania) - new Date(a.datarozdania);
            })
            .reverse();
          setMyBets(temparray.reverse().slice(0, 3));
          setPoints(res.data.punkty);
        });
    }
  }, [isLogged]);
  const handleLogin = async (e) => {
    e.preventDefault();
    await axios
      .post(`${process.env.NEXT_PUBLIC_STRAPI_URL}/auth/local`, {
        identifier: login,
        password: password,
      })
      .then((response) => {
        if (response.data.jwt) {
          cookies.set('token', response.data.jwt, { path: '/' });
          cookies.set('username', response.data.user.username, { path: '/' });
          cookies.set('id', response.data.user.id, { path: '/' });
          cookies.set('isAdmin', response.data.user.role.name, { path: '/' });
          router.reload(window.location.pathname);
        }
      });
  };
  const handleLogout = () => {
    cookies.remove('token', { path: '/' });
    cookies.remove('username', { path: '/' });
    cookies.remove('id', { path: '/' });
    setIsLogged(false);
  };

  if (isLoading) return <LoadingView />;
  if (!isLogged)
    return (
      <Center minH="92vh" display="flex" flexDirection="column">
        <Image src="https://i.imgur.com/9Rqu5ZB.png" />
        <form action="" onSubmit={(e) => handleLogin(e)}>
          <Input my="2" onChange={(e) => setLogin(e.target.value)} type="text" placeholder="username" />
          <Input my="2" onChange={(e) => setPassword(e.target.value)} type="password" placeholder="password" />
          <Button type="submit">Login</Button>
        </form>
      </Center>
    );
  return (
    <>
      <Head>
        <title>mechanikBET</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {isLogged && (
        <>
          <br />
          <Badge display={['initial', 'initial', 'none', 'none', 'none']} variant="outline">
            points - {points > 0 ? points : `${points} :(`}
          </Badge>
          <br />
        </>
      )}

      <Grid display={['block', 'block', 'grid', 'grid', 'grid']} templateColumns={['', '', '1fr auto 1fr', '1fr auto 1fr', '1fr auto 1fr']} columnGap={4} templateAreas="'left center right'">
        <Flex gridArea="center" flexDirection="column" alignItems="center">
          {data.length <= 0 && <h4>Brak aktywnych zakładów</h4>}
          {data.map((item) => (
            <SingleBet key={item.id} setPoints={setPoints} item={item} />
          ))}
        </Flex>
        <Box display={['none', 'none', 'block', 'block', 'block']} gridArea="right">
          <Flex alignItems="center">
            <Avatar bg="whiteAlpha.200" mr="1" />
            <Heading size="md">{cookies.get('username')}</Heading>
          </Flex>

          <Badge fontSize="sm">punkty - {points}</Badge>
          <br />
          <Text>Ostatnie zakłady</Text>
          {myBets !== null && (
            <>
              {myBets.map((bet, index) => (
                <SingleKupon kupon={bet} key={index} />
              ))}
            </>
          )}
          <Button onClick={() => handleLogout()}>Wyloguj</Button>
        </Box>
      </Grid>
    </>
  );
}
