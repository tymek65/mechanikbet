import Head from 'next/head';
import { useQuery } from 'react-query';
import axios from 'axios';
import { useState, useEffect } from 'react';
import Cookies from 'universal-cookie';
import { useRouter } from 'next/router';
import SingleBet from '../components/SingleBet';
import Link from 'next/link';
import { Button, Badge, Input, Center, Spinner, Box, Flex, Grid, Avatar, Heading, Text, Image } from '@chakra-ui/react';
export default function Home() {
  const router = useRouter();
  const { isLoading, data } = useQuery('repoData', () => fetch(`${process.env.NEXT_PUBLIC_STRAPI_URL}/zakladies?active=true`).then((res) => res.json()));
  const cookies = new Cookies();
  const [login, setLogin] = useState();
  const [password, setPassword] = useState();
  const [isLogged, setIsLogged] = useState(false);
  const [punkty, setPunkty] = useState(0);
  const [kupony, setKupony] = useState(null);

  useEffect(() => {
    if (cookies.get('token')) {
      setIsLogged(true);
    }
    if (isLogged === true) {
      axios
        .get(`${process.env.NEXT_PUBLIC_STRAPI_URL}/users/me`, {
          headers: {
            Authorization: `Bearer ${cookies.get('token')}`,
          },
        })
        .then((res) => {
          setPunkty(res.data.punkty);
          setKupony(res.data.kuponies.reverse().slice(0, 3));
        });
    }
  }, []);
  useEffect(() => {
    if (isLogged === true) {
      axios
        .get(`${process.env.NEXT_PUBLIC_STRAPI_URL}/users/me`, {
          headers: {
            Authorization: `Bearer ${cookies.get('token')}`,
          },
        })
        .then((res) => {
          const temparray = res.data.kuponies
            .sort((a, b) => {
              return new Date(b.datarozdania) - new Date(a.datarozdania);
            })
            .reverse();
          setKupony(temparray.reverse().slice(0, 3));
          setPunkty(res.data.punkty);
        });
    }
  }, [isLogged]);
  const handleLogin = async (e) => {
    e.preventDefault();
    await axios
      .post(`${process.env.NEXT_PUBLIC_STRAPI_URL}/auth/local`, {
        identifier: login,
        password: password,
      })
      .then((response) => {
        if (response.data.jwt) {
          cookies.set('token', response.data.jwt, { path: '/' });
          cookies.set('username', response.data.user.username, { path: '/' });
          cookies.set('id', response.data.user.id, { path: '/' });
          cookies.set('isAdmin', response.data.user.role.name, { path: '/' });
          router.reload(window.location.pathname);
        }
      })

      .catch((error) => {
        console.log(error.response.data.error);
      });
  };
  const handleLogout = () => {
    cookies.remove('token', { path: '/' });
    cookies.remove('username', { path: '/' });
    cookies.remove('id', { path: '/' });
    setIsLogged(false);
  };

  if (isLoading)
    return (
      <Center minH="92vh">
        <Spinner size="lg" />
      </Center>
    );
  if (!isLogged)
    return (
      <Center minH="92vh" display="flex" flexDirection="column">
        <Image src="https://i.imgur.com/9Rqu5ZB.png" />
        <form action="" onSubmit={(e) => handleLogin(e)}>
          <Input my="2" onChange={(e) => setLogin(e.target.value)} type="text" placeholder="username" />
          <Input my="2" onChange={(e) => setPassword(e.target.value)} type="password" placeholder="password" />
          <Button type="submit">Login</Button>
        </form>
      </Center>
    );
  return (
    <>
      <Head>
        <title>mechanikBET</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Link href="/leaderboard">
        <Button variant="outline" m="1">
          Leaderboard
        </Button>
      </Link>
      <Link href="/kupony">
        <Button variant="outline" m="1">
          Twoje kupony
        </Button>
      </Link>
      <Link href="/donate">
        <Button variant="outline" m="1">
          Donate
        </Button>
      </Link>
      {cookies.get('isAdmin') === 'admin' && (
        <Link href="/admin">
          <Button variant="outline" m="1">
            Admin
          </Button>
        </Link>
      )}

      {isLogged && (
        <>
          <br />
          <Badge display={['initial', 'initial', 'none', 'none', 'none']} variant="outline">
            Punkty - {punkty > 0 ? punkty : `${punkty} :(`}
          </Badge>
          <br />
        </>
      )}

      <Grid display={['block', 'block', 'grid', 'grid', 'grid']} templateColumns={['', '', '1fr auto 1fr', '1fr auto 1fr', '1fr auto 1fr']} columnGap={4} templateAreas="'left center right'">
        <Flex gridArea="center" flexDirection="column" alignItems="center">
          {data.length <= 0 && <h4>Brak aktywnych zakładów</h4>}
          {data.map((item) => (
            <SingleBet key={item.id} setPunkty={setPunkty} item={item} />
          ))}
        </Flex>
        <Box display={['none', 'none', 'block', 'block', 'block']} gridArea="right">
          <Flex alignItems="center">
            <Avatar bg="whiteAlpha.200" mr="1" />
            <Heading size="md">{cookies.get('username')}</Heading>
          </Flex>

          <Badge fontSize="sm">punkty - {punkty}</Badge>
          <br />
          <Text>Ostatnie zakłady</Text>
          {kupony !== null && (
            <>
              {kupony.map((kupon, index) => (
                <Box key={index} p="3" my="2" border="2px" borderRadius="lg" borderColor="grey" w="200px" className="kupon" bgColor="whiteAlpha.100">
                  <Text>
                    <b>{kupon.zaklady.tekst.length <= 35 ? kupon.zaklady.tekst : kupon.zaklady.tekst.slice(0, 35) + '...'}</b>
                  </Text>
                  <Text>
                    Kurs - <b>{kupon.kurs}</b>
                  </Text>
                  <Text>
                    Typ -<b>{kupon.opcja === 1 ? kupon.zaklady.opcja1 : kupon.zaklady.opcja2}</b>
                  </Text>
                  <Text>
                    Stawka - <b>{kupon.wartosc}</b>
                  </Text>

                  <Badge colorScheme={kupon.active === true ? 'gray' : kupon.wygrany === true ? 'green' : 'red'} variant={kupon.active === true ? 'outline' : 'solid'}>
                    {kupon.active === true ? 'Kupon w grze' : kupon.wygrany === true ? 'Wygrany' + ` +${kupon.wartosc * kupon.kurs}` : 'Przegrany' + ` -${kupon.wartosc}`}
                  </Badge>
                </Box>
              ))}
            </>
          )}
          {isLogged && <Button onClick={() => handleLogout()}>Wyloguj</Button>}
        </Box>
      </Grid>
    </>
  );
}
